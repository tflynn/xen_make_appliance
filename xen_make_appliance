#!/bin/bash

#
# Script to create Xen-based VMs from scratch on CentOS 5
#
# See README for pre-requisites etc.
# 
# tflynn projects@olioinfo.net
#
# May be freely redistributed
#

DEBUG=false


if [[ ${DEBUG} != true ]] ; then
  if [[ `whoami` != 'root' ]] ; then
    echo "Please run this script as root"
    exit 1
  fi
fi


if [[ $# != 5 ]] ; then
  echo "Usage: xen_make_appliance [binaries directory] [configuration directory] [appliance name] [memory size in MB] [disk_size in GB]"
  exit 1
fi

###############
# Set up a whole bunch of variables
###############

binDir=$1
configurationDir=$2
applianceName=$3
applianceNameLowerCase=`echo ${applianceName} | tr '[:upper:]' '[:lower:]'`
memorySizeMB=$4
diskSizeGB=$5
# Calculate actual logical volume size as 100 MB less than requested to allow slop in sizing calculations
diskSizeMB=$(((diskSizeGB * 1000) - 100))

vmMacAddresses="${configurationDir}/vm_mac_addresses"
dropboxBaseUrlFile="${configurationDir}/dropbox_base_url"
vmMountCmds=${configurationDir}/mount_all_vms
vmStartCmds=${configurationDir}/start_all_vms

# Load configuration files

if [[ ! -e $dropboxBaseUrlFile ]] ; then
  echo "Please create the file ${dropboxBaseUrlFile} with the URL for the base of the Xen configuration file tree."
  exit 1
fi

source $dropboxBaseUrlFile

configFile="${configurationDir}/xen_make_appliance.config"

if [[ -e ${configFile} ]] ; then
  source ${configFile}
else
  echo "No configuration file found. Using defaults."
fi

# Set variables based on configuration file settings or defaults
  
logicalVolumeGroupName=${LOGICAL_VOLUME_GROUP_NAME:-vm_lvs}
logicalVolumePrefix=${LOGICAL_VOLUME_PREFIX:-lvol_}  
logicalVolumeStripes=${LOGICAL_VOLUME_TOTAL_STRIPES:-5}
baseVMMountPoint=${BASE_VM_MOUNT_POINT:-xenvms}
backupFileExtension=${BACKUP_FILE_EXTENSION:-bak}

dropboxBaseUrl=${DROPBOX_BASE_URL}
dropboxWriteDir=${DROPBOX_WRITE_DIR}

########
# VM Setup starts
########
  
# Create the logical volume to hold the VM

logicalVolumeExists=`sudo /usr/sbin/lvscan | grep -c ${logicalVolumePrefix}${applianceNameLowerCase}`
if [[ X${logicalVolumeExists} == X0 ]] ; then
  sudo /usr/sbin/lvcreate -i${logicalVolumeStripes} -L${diskSizeGB}G -n${logicalVolumePrefix}${applianceNameLowerCase} ${logicalVolumeGroupName}
  sudo /sbin/mkfs -t ext3 /dev/${logicalVolumeGroupName}/${logicalVolumePrefix}${applianceNameLowerCase}
  sudo mkdir -p ${baseVMMountPoint}/${applianceName}
  sudo mount /dev/${logicalVolumeGroupName}/${logicalVolumePrefix}${applianceNameLowerCase}  ${baseVMMountPoint}/${applianceName}

  # Save off VM mount cmd
  touch ${vmMountCmds}
  cp ${vmMountCmds} ${vmMountCmds}.${backupFileExtension}
  echo "sudo mount /dev/${logicalVolumeGroupName}/${logicalVolumePrefix}${applianceNameLowerCase}  ${baseVMMountPoint}/${applianceName}" >> ${vmMountCmds}.${backupFileExtension}
  uniq < ${vmMountCmds}.${backupFileExtension} >${vmMountCmds}
  chmod a+x ${vmMountCmds}

else
  echo "Logical volume ${logicalVolumePrefix}${applianceNameLowerCase} already exists. Skipping creation ..."
fi

# Create the VM itself
if [[ ! -e ${baseVMMountPoint}/${applianceName}/appliance-base.img ]] ; then
  cd ${baseVMMountPoint}/${applianceName}
  dd if=/dev/zero of=appliance-base.img oflag=direct bs=1M seek=${diskSizeMB} count=1
  #wget http://dl.dropbox.com/u/12189743/xen/${applianceName}/appliance-base.install.cfg
  #wget http://dl.dropbox.com/u/12189743/xen/${applianceName}/appliance-base.cfg
else
  echo "Base VM disk image ${baseVMMountPoint}/${applianceName}/appliance-base.img already exists. Skipping VM Disk image creation ..."
fi

########
# Generate the configuration files
########


# Get the next MAC address
nextMacAddress=0
if [[ -e ${vmMacAddresses} ]] ; then
  while read inputLine
  do
    nextMacAddress=inputLine
    break
  done < ${vmMacAddresses}
fi
nextMacAddress=$((nextMacAddress + 1))
if [[ X${DEBUG} == true ]] ; then
  echo "nextMacAddress ${nextMacAddress}"
fi

echo "${nextMacAddress}" > ${vmMacAddresses}
nextMacAddressHex=`printf "%02X" ${nextMacAddress}`

configurationBaseWriteDir=${dropboxWriteDir}
if [[ X${configurationBaseWriteDir} == X ]] ; then
  echo "DROPBOX_WRITE_DIR must be defined in file 'dropbox_base_url"
  exit 1
else
  if [[ ! -e ${configurationBaseWriteDir} ]] ; then
    echo "DROPBOX_WRITE_DIR defined as ${configurationBaseWriteDir} but directory does not exit"
    exit 1
  fi
fi

applianceWriteDir=${configurationBaseWriteDir}/${applianceNameLowerCase}
if [[ -e ${applianceWriteDir} ]] ; then
  echo "Appliance Configuration directory ${applianceWriteDir} exists. Skipping creation ..."
else
  echo "Appliance Configuration directory ${applianceWriteDir} does not exist. Creating ..."
  sudo mkdir -p ${applianceWriteDir}
fi

# Calculate partition size as (100MB + 100MB boot partition) less tham logical volume size to allow for slop in sizing calculations
partSizeMB=$((diskSizeMB - 200))
# Calculate internal disk size as (100MB + swap size (256MB)) less than partition size
diskSizeInternalMB=$((partSizeMB - 356))


read -d '' APPLIANCE_BASE_KICKSTART_CONFIGURATION << APPLIANCE_BASE_KICKSTART_CONFIGURATION_DOC
# Kickstart Configuration for MINIMAL CENTOS
install
text
reboot

url --url http://mirror.centos.org/centos/5.5/os/x86_64/
lang en_US.UTF-8
langsupport --default=en_US.UTF-8 en_US.UTF-8
keyboard us

skipx
network --device eth0 --bootproto dhcp

# The password is 'password'
rootpw --iscrypted $1$h5ebo1pm$OHL3De9oalNzqIG1BUyJp0
firewall --disabled
selinux --permissive
authconfig --enableshadow --enablemd5
timezone America/New_York

bootloader --location=mbr
clearpart --all --initlabel
part /boot --fstype ext3 --size=100
part pv.2 --size=${partSizeMB} --grow
volgroup VolGroup00 --pesize=65536 pv.2
logvol /    --fstype ext3 --name=LogVol00 --vgname=VolGroup00 --size=${diskSizeInternalMB} --grow
logvol swap --fstype swap --name=LogVol01 --vgname=VolGroup00 --size=256
%packages --nobase
coreutils
bind-utils
yum
rpm
e2fsprogs
lvm2
grub
sysstat
ntp
openssh-server
openssh-clients
wget
java
%post
APPLIANCE_BASE_KICKSTART_CONFIGURATION_DOC

echo "${APPLIANCE_BASE_KICKSTART_CONFIGURATION}"

exit 1

read -d '' APPLIANCE_BASE_CONFIGURATION << APPLIANCE_BASE_CONFIGURATION_DOC
# Xen Configuration for appliance-base
name   = "appliance-base"
memory = "${memorySizeMB}"
disk   = ['tap:aio:/xen/appliance-base/appliance-base.img,xvda,w',]
vif    = ['bridge=xenbr0,mac=00:16:3e:00:00:${nextMacAddressHex}',]
vcpus  = 1

bootloader ="/usr/bin/pygrub"
on_reboot  = 'restart'
on_crash   = 'restart'
APPLIANCE_BASE_CONFIGURATION_DOC

echo "${APPLIANCE_BASE_CONFIGURATION}"


echo "cd /xenvms/${applianceName}"
echo "dd if=/dev/zero of=appliance-base.img oflag=direct bs=1M seek=${diskSizeMB} count=1"
echo "wget http://dl.dropbox.com/u/12189743/xen/${applianceName}/appliance-base.install.cfg"
echo "wget http://dl.dropbox.com/u/12189743/xen/${applianceName}/appliance-base.cfg"


# Initialize the VM the first time
#xm create -c appliance-base.install.cfg
echo "xm create -c appliance-base.install.cfg"
# Start it up the second time with standard options
#xm create -c appliance-base.cfg
echo "xm create -c appliance-base.cfg"

# Add to VM start command
touch ${vmStartCmds}
cp ${vmStartCmds} ${vmStartCmds}.${backupFileExtension}
echo "pushd /xenvms/${applianceName} 2>%1 >/dev/null ; xm create -c appliance-base.cfg ; popd 2>%1 >/dev/null" >> ${vmStartCmds}.${backupFileExtension}
uniq < ${vmStartCmds}.${backupFileExtension} >${vmStartCmds} 
chmod a+x ${vmStartCmds}




